[sp.slide-title{ Gitとはなにか }]
[sp.event-title{ 電書ラボ公開セミナー2017第3回 Gitを活用した電子書籍制作 }]
section.page.first-page {
h1: Gitとはなにか
h2: 2017-11-22 電書ラボ公開セミナー2017 第3回
h3: 小嶋智
}

# 自己紹介

* プログラマ
* テキスト処理や電子出版の周辺を漂っています

image.fig-20(img/profile.png, プロフィール画像): 

#(t) Gitとはなにか？

#(t) 空気とか地面

# プログラマにとっては

p.logo: [img(img/git-full-logo.png){git logo}]

* 空気のように当たり前
* テキストものを管理するときはなんでも使っている
** この資料もGit管理
* （実はGitでなくても良い）


#(t) あらためて
#(t) Gitとはなにか？
# Git（ギット）とは
バージョン管理システム（VCS）の一種。
ほかにもMercurial（Hg）とかsubversion（svn）とか

p.logo: [img(img/git-logo.png){git}] [img(img/hg-logo.svg){hg}] [img(img/svn-logo.png){svg}]
# バージョン管理システムの目的は？ 

バージョン（版）を管理すること。

image.fig-65(img/kappan.jpg,版といってもこれではなく): Photograph: Satoshi Kojima

#(t) 何がうれしいの？

# バージョン管理レベルゼロ

image.fig-65(img/level-0.png, 手動バージョン管理):

#(t) 最新版を修正…

# この

image.fig-65(img/level-0.png, 手動バージョン管理):

#(t) どれ

# バージョン管理レベル１

厳密な命名ルールの適用
image.fig-50(img/level-1.png, 手動バージョン管理その2):

# バージョン管理レベル１ 

変更履歴

image.fig-65(img/manual-history.png, 手動履歴):

#(t) レベル1の問題点

#(t) 人間は間違う
#(t) 人間は怠ける
#(t) 人間は忘れる

# 人間はこうなる
* ルール・日付・変更点を間違える
* 履歴「誤字修正」実際「ついでにこれも編集しちゃえ」
* 履歴「指摘事項修正」…どこ？ なにを変えたの？
* 履歴を書こう。…何変更したんだっけ

# 人間はあてにならない
image.fig-65(img/t-800.jpg,人類): Photograph: Dick Thomas Johnson  https://www.flickr.com/photos/31029865@N06/14997552775

# Gitが解決すること

人類の間違いや怠慢を（ある程度）補助する

# 例えば

image.fig-65(img/commit-message.png,怠惰なコミットメッセージ): 

この怠惰なコメント

# 変更点は機械的に確認できる
image.fig-50(img/commit-diff.png,コミットの内容): [l(https://github.com/skoji/densholab-slide-20171122/commit/b654c7bbe0dfbb24462db71df1c198f5b12212d1){リンク}]

# 誰がいつどこを変更したかも確認できる

blameという機能

image(img/torutaru-blame.png,トルタルの変更):

# Gitの効果

怠惰の補助だけではありません

# 過去の時点に戻るのが簡単

手元に各バージョンのファイルがなくても大丈夫

image.fig-50(img/delorean.jpg,デロリアン  https://commons.wikimedia.org/wiki/File:Delorean_DMC-12_side.jpg):Photograph: Kevin Abato 

# 複数人・同一ファイルへの修正作業

* 同じファイルを複数人で同時に修正しても大丈夫
* 大丈夫じゃないこともあります
** 例：同じ行を同時に修正したとき
** あんまり起きない
** 普通は別の人は別の場所をさわります
** 大丈夫じゃないときも、なんとかする方法が用意されています

# 分岐した履歴も扱える

たとえば、改訂版を作りつつ、従来版の間違いを修正するとか。
image(img/branch.png,ブランチの模式):

# ほかにもいろいろあります。
参考文献をご参照くださいませ
[img.book(img/wakaba.jpg){わかばちゃんと学ぶGit使い方入門}] [img.book(img/git-pocket.jpg){【改訂新版】Gitポケットリファレンス}][img.book(img/nyumon_git.jpg){入門Git}]

#(t) Gitの用語と概念
## の基本部分
# リポジトリと作業ツリー

image(img/repo-tree.png,リポジトリにはGitのデータが入っていて、人間は作業ツリーで作業する):

# addとコミット

image.fig-65(img/commit-add.png,コミットすることで反映される):

# コミット
* コミットは動詞兼名詞
** コミットするとコミットができる。
** 履歴 ＝ 一連のコミット


# ローカルレポジトリと共有レポジトリ

image(img/remote-local.png,リモートとローカルレポジトリ):

# clone

image(img/clone.png, リモートをローカルに複製する):

# push

image(img/push.png, ローカルの変更点をリモートに反映):

# pull

image(img/pull.png, リモートの変更点をローカルに反映):


# GitとGitHub

* Git ≠GitHub
* GitHubはリモートレポジトリのホスティングサービス
image.fig-65(img/github.png, githubはリモートリポジトリ):

#(t) 最後に
#(t) Gitは多機能
#(t) 説明しきれません
#(t) でも
#(t) ごく一部でも便利
#(t) まずは使ってみよう

# 参考文献
section.bookguide {
[img.book(img/wakaba.jpg){わかばちゃんと学ぶGit使い方入門}]
[l(http://www.hanmoto.com/bd/isbn/9784863542174){わかばちゃんと学ぶGit使い方入門}]
}

* 非エンジニアも対象
* 内容が浅いわけではない
* むしろ濃い

# 参考文献 

section.bookguide {
[img.book(img/git-pocket.jpg,Gitポケットリファレンス){【改訂新版】Gitポケットリファレンス}]
[l(http://www.hanmoto.com/bd/isbn/9784774185934){【改訂新版】Gitポケットリファレンス}]
}

* 概要・コマンドリファレンス・開発フローまで幅広くカバー。
* ややエンジニア向け

# 参考文献

section.bookguide {
[img.book(img/nyumon_git.jpg){入門Git}]
[l(http://www.hanmoto.com/bd/isbn/9784798023809){入門Git}]
}
* Gitのメンテナによる書籍
* いわゆる入門書ではない
* Gitがどんなデータ構造をどう扱っているか知りたくなったらおすすめ

